/*** BEGIN file-header ***/
#include "tp-glib-enums.h"
#include "config.h"
/*** END file-header ***/

/*** BEGIN file-production ***/

/* enumerations from "@filename@" */
/*** END file-production ***/

/*** BEGIN value-header ***/
static const G@Type@Value @enum_name@_values[] =
{
/*** END value-header ***/

/*** BEGIN value-production ***/
  { @VALUENAME@, "@VALUENAME@", "@valuenick@" },
/*** END value-production ***/

/*** BEGIN value-tail ***/
  { 0, NULL, NULL }
};

G_CONST_RETURN G@Type@Value *
@enum_name@_from_name (const char *name)
{
  const G@Type@Value *v = &@enum_name@_values[0];

  g_return_val_if_fail(NULL != name, NULL);

  while(v->value_name)
  {
    if (!strcmp(v->value_name, name))
      return v;
  }

  return NULL;
}

G_CONST_RETURN G@Type@Value *
@enum_name@_from_nick (const char *nick)
{
  const G@Type@Value *v = &@enum_name@_values[0];

  g_return_val_if_fail(NULL != nick, NULL);

  while(v->value_nick)
  {
    if (!strcmp(v->value_nick, nick))
      return v;
  }

  return NULL;
}

G_CONST_RETURN char *
@enum_name@_get_name (@EnumName@ value)
{
  const G@Type@Value *v = &@enum_name@_values[0];

  while(v->value_name)
  {
    if (v->value == value)
      return v->value_name;
  }

  return NULL;
}

G_CONST_RETURN char *
@enum_name@_get_nick (@EnumName@ value)
{
  const G@Type@Value *v = &@enum_name@_values[0];

  while(v->value_nick)
  {
    if (v->value == value)
      return v->value_nick;
  }
  return NULL;
}
/*** END value-tail ***/
